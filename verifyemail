import React, { useState } from 'react';
import { Link } from 'react-router-dom';
import firebase from 'firebase/compat/app';
import 'firebase/compat/auth';
import './SignupScreen.css';
import ProfileCompletion from './ProfileCompletion'; // Import ProfileCompletion component
import LoginScreen from './LoginScreen'; // Import LoginScreen component

// Initialize Firebase with your configuration 
const firebaseConfig = {
    
        apiKey: "AIzaSyDzuEJwdCPwjeHNh7lDZ2F55_LoRHxcgBg",
        authDomain: "expense-tracker-15059.firebaseapp.com",
        projectId: "expense-tracker-15059",
        storageBucket: "expense-tracker-15059.appspot.com",
        messagingSenderId: "984497806329",
        appId: "1:984497806329:web:60df7797060a6608f47b28",
        measurementId: "G-BLVLLE95FH"
      };


firebase.initializeApp(firebaseConfig);

const SignupScreen = () => {
  const [email, setEmail] = useState('');
  const [password, setPassword] = useState('');
  const [confirmPassword, setConfirmPassword] = useState('');
  const [error, setError] = useState('');
  const [loggedIn, setLoggedIn] = useState(false);
  const [profileIncomplete, setProfileIncomplete] = useState(false);
  const [verificationSent, setVerificationSent] = useState(false); // State to track if verification email has been sent

  const handleInputChange = (e, setStateFunction) => {
    setStateFunction(e.target.value);
  };

  const handleSignup = async (e) => {
    e.preventDefault();
    setError('');

    try {
      if (!email || !password || !confirmPassword) {
        throw new Error('Please fill in all fields');
      }
      if (password !== confirmPassword) {
        throw new Error('Passwords do not match');
      }

      // Create user with email and password
      await firebase.auth().createUserWithEmailAndPassword(email, password);

      // Send email verification
      await sendVerificationEmail();

      // Reset fields after successful registration
      setEmail('');
      setPassword('');
      setConfirmPassword('');

      console.log('User has successfully signed up.');

      // Update state to indicate successful signup
      setLoggedIn(true);
    } catch (error) {
      setError(error.message);
    }
  };

  // Function to send verification email using Firebase Auth REST API
  const sendVerificationEmail = async () => {
    try {
      const idToken = await firebase.auth().currentUser.getIdToken(); // Get user's ID token
      const response = await fetch(`https://identitytoolkit.googleapis.com/v1/accounts:sendOobCode?key=AIzaSyDzuEJwdCPwjeHNh7lDZ2F55_LoRHxcgBg`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          requestType: 'VERIFY_EMAIL',
          idToken: idToken,
        }),
      });

      if (!response.ok) {
        throw new Error('Failed to send verification email');
      }

      setVerificationSent(true); // Update state to indicate email has been sent
    } catch (error) {
      setError(error.message);
    }
  };

  return (
    <div className="container">
      <div className="signup-box">
        {!loggedIn ? (
          <>
            <h2>{'Signup'}</h2>
            {error && <p style={{ color: 'red' }}>{error}</p>}
            <form onSubmit={handleSignup}>
              <div className="input-group">
                <input
                  type="email"
                  value={email}
                  onChange={(e) => handleInputChange(e, setEmail)}
                />
                <span className="placeholder">Email</span>
              </div>
              <div className="input-group">
                <input
                  type="password"
                  value={password}
                  onChange={(e) => handleInputChange(e, setPassword)}
                />
                <span className="placeholder">Password</span>
              </div>
              <div className="input-group">
                <input
                  type="password"
                  value={confirmPassword}
                  onChange={(e) => handleInputChange(e, setConfirmPassword)}
                />
                <span className="placeholder">Confirm Password</span>
              </div>
              <button type="submit">Signup</button>
            </form>
            <p>Already a user? <Link to="/login">Login</Link></p>
            {verificationSent && <p>Email verification sent. Check your email.</p>}
          </>
        ) : (
          <>
            {profileIncomplete ? (
              <ProfileCompletion onUpdateProfile={() => setProfileIncomplete(false)} />
            ) : (
              <LoginScreen />
            )}
          </>
        )}
      </div>
    </div>
  );
};

export default SignupScreen;
